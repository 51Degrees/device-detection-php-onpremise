# Template for build and test stage, which tests api on specified agent for different versions of php.

parameters:
# buildType: Options: Development or Production 
# Development: Build and test stage will use submodule references for 
# dependencies where the dependency is relative to the local file system
# Production: Build and test stage will use the publically released packages.
# imageName: agent to run the stage on
- name: buildType
- name: imageName
- name: runTests
  type: string
  default: 'On'

stages:
- stage: Build_and_Test

  jobs:
    - job: Build_and_Test
      displayName: Build and Test
      condition: ne(${{ parameters.runTests }}, 'Off')

      pool:
        vmImage: ${{ parameters.imageName }}

      variables: 
        - group: InternalKeys

      strategy:
        matrix:
          PHP 5.6:
            phpVersion: 5.6
          PHP 7.2:
            phpVersion: 7.2
          PHP 7.3:
            phpVersion: 7.3
          PHP 7.4:
            phpVersion: 7.4

      steps:
      - checkout: self
        submodules: recursive
        lfs: true
        persistCredentials: true

      - script: |
          sudo add-apt-repository ppa:ondrej/php
          sudo apt-get update -y
        displayName: 'Intall PHP 5'
        condition: eq(variables['phpVersion'], '5.6')

        # Install php and set as default Version to be used in the next tasks.
      - script: |
          sudo apt-get update -y
          sudo apt-get install -y php$(phpVersion)-dev re2c
          if [ $(phpVersion) -eq 5.6 ]; then
            sudo apt-get install -y php$(phpVersion)-phpdbg
            sudo apt-get install -y php$(phpVersion)-cgi
          fi

          sudo update-alternatives --set php /usr/bin/php$(phpVersion)
          sudo update-alternatives --set phpize /usr/bin/phpize$(phpVersion)
          sudo update-alternatives --set php-config /usr/bin/php-config$(phpVersion)
          sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
          sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
          sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
          sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)

          export versionc=`php -version | grep -Fc "$(phpVersion)"`
          if [ $versionc -eq 0 ]; then
            echo "Failed to install correct php version $(phpVersion)"
            exit 1
          fi

          php -version
        displayName: 'Use PHP version $(phpVersion)'

        # Install Device Detection OnPremise extension
      - script: |
          cd on-premise
          phpize
          ./configure
          sudo make install
          cd ..
        displayName: 'Install Device Detection OnPremise extension'
        # Commented out due to a warning when compiling common-cxx.
        # This warning will be resolved in a future version of common-cxx,
        # but for now, this workaround will allow the PHP plugin to build.
        #failOnStderr: true

        # Install Pipeline Dependencies based on the parameters. 
      - script: |
          echo "Build Type ${{ parameters.buildType }}."
          if [ "${{ parameters.buildType }}" = "Development" ]; then
            echo "Test Development Pipeline."
            cd pipeline-php-engines
            mv composer-dev.json composer.json
            if [ $? -ne 0 ]; then
              echo "Failed to update composer.json with development version for submodule pipeline-php-engines."
              exit 1
            fi
            cd ..

            mv composer-dev.json composer.json
            if [ $? -ne 0 ]; then
              echo "Failed to update composer.json with development version."
              exit 1
            fi
          else
            echo "Test Production Pipeline."
          fi

          composer install --no-interaction --prefer-dist 
        displayName: 'Install dependencies'

        # Install phpUnit5 to run test cases.
      - script: |
          sudo rm -r /usr/local/bin/phpunit
          wget -O phpunit https://phar.phpunit.de/phpunit-5.phar
          chmod +x phpunit
          sudo mv phpunit /usr/local/bin/phpunit
          sudo apt-get update -y
          sudo apt-get install -y php5.6-xml
          sudo apt-get install -y php5.6-mbstring
        displayName: 'install PHPUnit 5'
        condition: eq(variables['phpVersion'], '5.6')
        
      - script: |
          export PHPVERSIONEXACT=`php-config --version | grep -o '^[0-9]\.[0-9]'`
          sudo sed -i 's,^enable_dl =.*$,enable_dl = On,' /etc/php/$PHPVERSIONEXACT/cli/php.ini
        displayName: 'Enable dl()'

        # Setting FiftyOneDegreesHashEngine extension and datafile paths in php.ini
      - script: |
          export PHPVERSIONEXACT=`php-config --version | grep -o '^[0-9]\.[0-9]'`
          echo extension=`pwd`/on-premise/modules/FiftyOneDegreesHashEngine.so | sudo tee -a /etc/php/$PHPVERSIONEXACT/cli/php.ini
          echo FiftyOneDegreesHashEngine.data_file=`pwd`/on-premise/device-detection-cxx/device-detection-data/51Degrees-LiteV4.1.hash | sudo tee -a /etc/php/$PHPVERSIONEXACT/cli/php.ini
          echo FiftyOneDegreesHashEngine.allow_unmatched=false | sudo tee -a /etc/php/$PHPVERSIONEXACT/cli/php.ini
        displayName: 'Set php ini settings'
        failOnStderr: true
        
      - script: |
          phpunit --log-junit test-results.xml
        displayName: 'Run tests with phpunit'
        failOnStderr: true
        
      # Publish Test Results to Azure Pipelines/TFS
      - task: PublishTestResults@2
        inputs:
          testRunner: 'JUnit'
          testResultsFiles: '**/test-results.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)'
          mergeTestResults: false
          testRunTitle: '$(phpVersion)'
          failTaskOnFailedTests: true
        condition: always()
  
      - script: |
          cd performance-tests
          sudo apt-get install cmake apache2-dev libapr1-dev libaprutil1-dev
          mkdir build
          cd build
          cmake ..
          cmake --build .
          cd ..
        displayName: 'Build Performance Tests'

      - script: |
          cd performance-tests/build
          ./runPerf.sh
          cd ..
        displayName: 'Run Performance Tests'
        failOnStderr: true
